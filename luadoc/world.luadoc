--- The game world.
module "World"

--- Constants that help define the game rules and physics.
-- @class table
-- @name Constants
-- @field SHIP_RADIUS The radius of a ship.
-- @field LASER_SPEED The speed at which a laser travels each tick.
-- @field LASER_HEAT The number of ticks it takes for a laser gun to cool down
--     before it can fire again.
-- @field LASER_DAMAGE The amount of energy depleted by a laser when it hits.
-- @field TORPEDO_SPEED The speed at which a torpedo travels each tick.
-- @field TORPEDO_HEAT The number of ticks it takes for a torpedo gun to cool
--     down before it can fire again.
-- @field TORPEDO_BLAST_RADIUS The radius of the blast caused by a torpedo
--     explosion. Any ship closer to the blast center will take damage.
-- @field TORPEDO_BLAST_FORCE The magnitude of force from a torpedo blast to a
--     ship located exactly at the center of a blast.
-- @field TORPEDO_BLAST_DAMAGE The damage caused by a torpedo blast to a ship
--     located exactly at the center of a blast.
-- @field DEFAULT_ENERGY The amount of energy a ship starts with each game and
--     each round.
-- @field MAX_THRUSTER_FORCE The maximum magnitude of force a thruster can emit
--     in one tick.
-- @field WALL_BOUNCE The portion of the colliding force that is reflected back
--     into a ship when it collides with a wall. A value of 1.0 would mean a
--     ship loses no momentum when hitting a wall.

--- A table of constants that describe the game rules and physics.
-- @see Constants
-- @return A table of key-value pairs defining constants about the game rules
--     and physics.
function constants()

--- Specifies the position and size of a wall.
-- @class table
-- @name Wall
-- @field left The x coordinate of the left side of the wall.
-- @field bottom The y coordinate of the bottom side of the wall.
-- @field width The width of the wall.
-- @field height The height of the wall.

--- A table of all the walls on the stage, including the outer walls.
-- @see Wall
-- @return A table with details of all the walls on the stage.
function walls()

--- Specifies the position, size, and tag of a zone.
-- @class table
-- @name Zone
-- @field left The x coordinate of the left side of the zone.
-- @field bottom The y coordinate of the bottom side of the zone.
-- @field width The width of the zone.
-- @field height The height of the zone.
-- @field tag The tag that identifies the zone. Not necessarily unique, and may
--     be empty.

--- A table of all the zones on the stage.
-- @see Zone
-- @return A table with details of all the zones on the stage.
function zones()

--- The width of the stage.
-- @return The width of the stage.
function width()

--- The height of the stage.
-- @return The height of the stage.
function height()

--- The current time of the game. Time increases by one each tick and does
-- not reset between rounds.
-- @return The current time.
function time()

--- The total number of ships in the game.
-- @return The total number of ships.
function numShips()

--- The number of ships assigned to each user loaded ship program.
-- @return The number of ships assigned to each team.
function teamSize()

--- Checks whether a ship is currently in any stage zone.
-- @see Ship
-- @see Zone
-- @param ship The ship to check.
-- @return <code>true</code> if the ship is in any stage zone,
--     <code>false</code> otherwise.
function inAnyZone(ship)

--- Checks whether a ship is currently in a specific stage zone.
-- @see Ship
-- @see Zone
-- @param ship The ship to check.
-- @param tag The tag of the zone to check.
-- @return <code>true</code> if the ship is in the stage zone with the given
--     tag, <code>false</code> otherwise.
function inZone(ship, tag)

--- Checks whether a ship's path from last tick to this tick intersects any part
-- of any stage zone.
-- @see Ship
-- @see Zone
-- @param ship The ship to check.
-- @return <code>true</code> if the ship touches any stage zone,
--     <code>false</code> otherwise.
function touchedAnyZone(ship)

--- Checks whether a ship's path from last tick to this tick intersects any part
-- of a specific stage zone.
-- @see Ship
-- @see Zone
-- @param ship The ship to check.
-- @param tag The tag of the zone to check.
-- @return <code>true</code> if the ship touches the stage zone with the given
--     tag, <code>false</code> otherwise.
function touchedZone(ship, tag)
